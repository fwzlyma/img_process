# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import cv2
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox


class Ui_mainWindow(object):
    directory = ""
    img_path = ""  # 记录原图
    img_path_new = ""  # 记录修改大小后的图地址
    arr = []  # 记录路径拆分项

    #批量操作变量定义
    crop_path = ""
    save_path = ""

    def setupUi(self, mainWindow):
        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(522, 473)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("img/sys.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        mainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout.addWidget(self.pushButton_4, 1, 0, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 2, 0, 1, 1)
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setObjectName("pushButton_5")
        self.gridLayout.addWidget(self.pushButton_5, 2, 1, 1, 2)
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setObjectName("pushButton_6")
        self.gridLayout.addWidget(self.pushButton_6, 2, 3, 1, 1)
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setObjectName("pushButton_7")
        self.gridLayout.addWidget(self.pushButton_7, 2, 4, 1, 1)
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setObjectName("pushButton_8")
        self.gridLayout.addWidget(self.pushButton_8, 2, 5, 1, 1)
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setObjectName("pushButton_9")
        self.gridLayout.addWidget(self.pushButton_9, 3, 0, 1, 1)
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setObjectName("pushButton_10")
        self.gridLayout.addWidget(self.pushButton_10, 3, 1, 1, 2)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout.addWidget(self.pushButton_2, 4, 0, 1, 1)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout.addWidget(self.lineEdit, 4, 2, 1, 4)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout.addWidget(self.pushButton_3, 5, 0, 1, 1)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.gridLayout.addWidget(self.lineEdit_2, 5, 2, 1, 4)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setText("")
        self.label_2.setMaximumSize(QtCore.QSize(200, 200))
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 4, 1, 2)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setMaximumSize(QtCore.QSize(200, 200))
        self.label.setText("")
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 3)
        mainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(mainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 522, 26))
        self.menubar.setObjectName("menubar")
        mainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(mainWindow)
        self.statusbar.setObjectName("statusbar")
        mainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(mainWindow)
        self.pushButton_4.clicked.connect(self.select)
        self.pushButton.clicked.connect(self.gray)
        self.pushButton_5.clicked.connect(self.blur)
        self.pushButton_6.clicked.connect(self.canny)
        self.pushButton_7.clicked.connect(self.dilate)
        self.pushButton_8.clicked.connect(self.erode)
        self.pushButton_9.clicked.connect(self.resize)
        self.pushButton_10.clicked.connect(self.crop)
        self.pushButton_2.clicked.connect(self.selectCropPath)
        self.pushButton_3.clicked.connect(self.selectSavePath)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)

    def select(self):
        try:
            self.directory = ""
            self.img_path = ""  # 记录原图
            self.img_path_new = ""  # 记录修改大小后的图地址
            self.arr = []  # 记录路径拆分项
            self.label_2.setPixmap(QtGui.QPixmap(""))
            self.label.setPixmap(QtGui.QPixmap(""))
            # directory = QFileDialog.getExistingDirectory(self,"选取文件夹","qt/img")
            self.img_path, filetype = QFileDialog.getOpenFileName(None, "选择路径", os.getcwd(), "Image Files(*.jpg *.png)")
            if(self.img_path == ""):
                print("未选择图片！")
            else:
                img = cv2.imread(self.img_path)
                h = img.shape[0] * 200 / img.shape[1]
                imgResize = cv2.resize(img, (200, h.__int__()))
                cv2.imwrite(self.img_path, imgResize)
                print(self.img_path)
                self.arr = self.img_path.split('/')
                # print(self.arr)  # ['F:', 'projects', 'PyCharmProjects', 'img_process', 'qt', 'img', 'original', 'sys.png']
                i = 0
                while (i < 7):
                    self.directory += self.arr[i] + '/'
                    i += 1
                # print(self.directory)  # F:/projects/PyCharmProjects/img_process/qt/img/
                self.label.setPixmap(QtGui.QPixmap(self.img_path))
        except Exception as e:
            print(e)

    def gray(self):
        if(self.directory == ""):
            QMessageBox.information(MainWindow, '提示', '请选择图片！', QMessageBox.Ok)
        else:
            try:
                print(self.arr[len(self.arr)-1]+"开始灰度图处理...")
                img = cv2.imread(self.img_path)
                imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                str = "\\"
                # str.join()
                name = self.arr[len(self.arr) - 1].split('.')[0]
                # img/gray/name+gray.png
                # print(str.join([self.arr[5], "gray", '.'.join([(name + "_gray"), "png"])]))
                cv2.imwrite(str.join([self.arr[6], "gray", '.'.join([(name + "_gray"), "png"])]), imgGray)
                imgGray_path = self.directory + "gray" + "/" + name + "_gray.png"
                self.label_2.setPixmap(QtGui.QPixmap(imgGray_path))
                print(self.arr[len(self.arr) - 1] + "灰度图处理完成")
            except Exception as e:
                print(e)

    def blur(self):
        if (self.directory == ""):
            QMessageBox.information(MainWindow, '提示', '请选择图片！', QMessageBox.Ok)
        else:
            try:
                print(self.arr[len(self.arr) - 1] + "开始高斯模糊...")
                img = cv2.imread(self.img_path)
                imgBlur = cv2.GaussianBlur(img,(7,7),0)
                str = "\\"
                # str.join()
                name = self.arr[len(self.arr) - 1].split('.')[0]
                # img/blur/name+blur.png
                cv2.imwrite(str.join([self.arr[6], "blur", '.'.join([(name + "_blur"), "png"])]), imgBlur)
                imgBlur_path = self.directory + "blur" + "/" + name + "_blur.png"
                self.label_2.setPixmap(QtGui.QPixmap(imgBlur_path))
                print(self.arr[len(self.arr) - 1] + "高斯模糊完成")
            except Exception as e:
                print(e)

    def canny(self):
        if (self.directory == ""):
            QMessageBox.information(MainWindow, '提示', '请选择图片！', QMessageBox.Ok)
        else:
            try:
                print(self.arr[len(self.arr) - 1] + "开始边缘检测...")
                img = cv2.imread(self.img_path)
                imgCanny = cv2.Canny(img, 100, 100)
                str = "\\"
                # str.join()
                name = self.arr[len(self.arr) - 1].split('.')[0]
                # img/canny/name+canny.png
                cv2.imwrite(str.join([self.arr[6], "canny", '.'.join([(name + "_canny"), "png"])]), imgCanny)
                imgCanny_path = self.directory + "canny" + "/" + name + "_canny.png"
                self.label_2.setPixmap(QtGui.QPixmap(imgCanny_path))
                print(self.arr[len(self.arr) - 1] + "边缘检测完成")
            except Exception as e:
                print(e)

    def dilate(self):
        if (self.directory == ""):
            QMessageBox.information(MainWindow, '提示', '请选择图片！', QMessageBox.Ok)
        else:
            try:
                print(self.arr[len(self.arr) - 1] + "膨胀处理开始...")
                img = cv2.imread(self.img_path)
                imgCanny = cv2.Canny(img,100,100)
                kernel = np.ones((5, 5), np.uint8)  # 统一类型 np.uint8
                imgDilate = cv2.dilate(imgCanny, kernel, iterations=1)
                str = "\\"
                # str.join()
                name = self.arr[len(self.arr) - 1].split('.')[0]
                # img/dilate/name+dilate.png
                cv2.imwrite(str.join([self.arr[6], "dilate", '.'.join([(name + "_dilate"), "png"])]), imgDilate)
                imgDilate_path = self.directory + "dilate" + "/" + name + "_dilate.png"
                self.label_2.setPixmap(QtGui.QPixmap(imgDilate_path))
                print(self.arr[len(self.arr) - 1] + "膨胀处理完成")
            except Exception as e:
                print(e)

    def erode(self):
        if (self.directory == ""):
            QMessageBox.information(MainWindow, '提示', '请选择图片！', QMessageBox.Ok)
        else:
            try:
                print(self.arr[len(self.arr) - 1] + "腐蚀处理开始...")
                img = cv2.imread(self.img_path)
                imgCanny = cv2.Canny(img, 100, 100)
                kernel = np.ones((3, 3), np.uint8)  # 统一类型 np.uint8
                imgDialation = cv2.dilate(imgCanny, kernel, iterations=1)
                imgErode = cv2.erode(imgDialation, kernel, iterations=1)
                str = "\\"
                # str.join()
                name = self.arr[len(self.arr) - 1].split('.')[0]
                # img/erode/name+erode.png
                cv2.imwrite(str.join([self.arr[6], "erode", '.'.join([(name + "_erode"), "png"])]), imgErode)
                imgErode_path = self.directory + "erode" + "/" + name + "_erode.png"
                self.label_2.setPixmap(QtGui.QPixmap(imgErode_path))
                print(self.arr[len(self.arr) - 1] + "腐蚀处理完成")
            except Exception as e:
                print(e)

    def resize(self):
        if (self.directory == ""):
            QMessageBox.information(MainWindow, '提示', '请选择图片！', QMessageBox.Ok)
        else:
            try:
                print(self.arr[len(self.arr) - 1] + " resize处理开始...")
                img = cv2.imread(self.img_path)
                h = img.shape[0] * 200 / img.shape[1]
                imgResize = cv2.resize(img,(200,h.__int__()))
                str = "\\"
                # str.join()
                name = self.arr[len(self.arr) - 1].split('.')[0]
                # img/resize/name+resize.png
                cv2.imwrite(str.join([self.arr[6], "resize", '.'.join([(name + "_resize"), "png"])]), imgResize)
                imgResize_path = self.directory + "resize" + "/" + name + "_resize.png"
                self.label_2.setPixmap(QtGui.QPixmap(imgResize_path))
                print(self.arr[len(self.arr) - 1] + " resize处理完成")
            except Exception as e:
                print(e)

    def crop(self):
        if (self.directory == ""):
            QMessageBox.information(MainWindow, '提示', '请选择图片！', QMessageBox.Ok)
        else:
            try:
                print(self.arr[len(self.arr) - 1] + "裁剪处理开始...")
                img = cv2.imread(self.img_path)
                height = img.shape[0]
                width = img.shape[1]
                if(height < width):
                    sub = width - height
                    i = (sub/2).__int__()
                    imgCrop = img[0:height,i:width-i]
                else:
                    sub = height - width
                    i = (sub/2).__int__()
                    imgCrop = img[i:height-i,0:width]
                str = "\\"
                # str.join()
                name = self.arr[len(self.arr) - 1].split('.')[0]
                # img\crop\name+crop.png
                cv2.imwrite(str.join([self.arr[6], "crop", '.'.join([(name + "_crop"), "png"])]), imgCrop)
                imgCrop_path = self.directory + "crop" + "/" + name + "_crop.png"
                self.label_2.setPixmap(QtGui.QPixmap(imgCrop_path))
                print(self.arr[len(self.arr) - 1] + "裁剪处理完成")
            except Exception as e:
                print(e)

    def selectCropPath(self):
        try:
            self.crop_path = QFileDialog.getExistingDirectory()  # D:/Code/projects/PyCharmProjects/img_process/qt/img2/crop
            # print(self.crop_path)
            self.lineEdit.setText(self.crop_path)

            # if(self.lineEdit_2.text()==""):
            #     print("没有了啦")
        except Exception as e:
            print(e)

    def selectSavePath(self):
        try:
            if self.crop_path == "":
                QMessageBox.information(MainWindow, '提示', '请选择要裁剪的图片的文件夹！', QMessageBox.Ok)
            else:
                self.save_path = QFileDialog.getExistingDirectory()
                self.lineEdit_2.setText(self.save_path)
                # print(self.crop_path) #F:/projects/PyCharmProjects/img_process/qt/img2/crop
                # print(self.save_path) #F:/projects/PyCharmProjects/img_process/qt/img2/save
                str = '/'
                img_path = os.listdir(self.crop_path)
                for i in range(len(img_path)):
                    jd_path = str.join([self.crop_path, img_path[i]])
                    print(jd_path)
                    img = cv2.imread(jd_path)
                    height = img.shape[0]
                    width = img.shape[1]
                    if (height < width):
                        sub = width - height
                        j = (sub / 2).__int__()
                        imgCrop = img[0:height, j:width - j]
                    else:
                        sub = height - width
                        j = (sub / 2).__int__()
                        imgCrop = img[j:height - j, 0:width]
                    imgResize = cv2.resize(imgCrop,(200,200))
                    cv2.imwrite('/'.join([self.save_path,img_path[i].split('.')[0]+"_crop.png"]),imgResize)
        except Exception as e:
            print(e)

    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "ImgProcessSystem"))
        self.pushButton_4.setText(_translate("mainWindow", "选择图片"))
        self.pushButton.setText(_translate("mainWindow", "灰度图"))
        self.pushButton_5.setText(_translate("mainWindow", "高斯模糊"))
        self.pushButton_6.setText(_translate("mainWindow", "边缘检测"))
        self.pushButton_7.setText(_translate("mainWindow", "膨胀"))
        self.pushButton_8.setText(_translate("mainWindow", "腐蚀"))
        self.pushButton_9.setText(_translate("mainWindow", "resize"))
        self.pushButton_10.setText(_translate("mainWindow", "裁剪"))
        self.pushButton_2.setText(_translate("mainWindow", "批量裁剪"))
        self.lineEdit.setPlaceholderText(_translate("mainWindow", "批量裁剪路径地址"))
        self.pushButton_3.setText(_translate("mainWindow", "保存地址"))
        self.lineEdit_2.setPlaceholderText(_translate("mainWindow", "批量裁剪图片保存地址"))


import sys

# 主方法，程序从此处启动PyQt设计的窗体
if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()  # 创建窗体对象
    ui = Ui_mainWindow()  # 创建PyQt设计的窗体对象
    ui.setupUi(MainWindow)  # 调用PyQt窗体的方法对窗体对象进行初始化设置
    MainWindow.show()  # 显示窗体
    sys.exit(app.exec_())  # 程序关闭时退出进程
